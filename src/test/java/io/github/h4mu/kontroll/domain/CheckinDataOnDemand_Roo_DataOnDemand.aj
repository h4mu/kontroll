// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package io.github.h4mu.kontroll.domain;

import io.github.h4mu.kontroll.domain.Checkin;
import io.github.h4mu.kontroll.domain.CheckinDataOnDemand;
import io.github.h4mu.kontroll.domain.StopTime;
import io.github.h4mu.kontroll.domain.StopTimeDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect CheckinDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CheckinDataOnDemand: @Component;
    
    private Random CheckinDataOnDemand.rnd = new SecureRandom();
    
    private List<Checkin> CheckinDataOnDemand.data;
    
    @Autowired
    StopTimeDataOnDemand CheckinDataOnDemand.stopTimeDataOnDemand;
    
    public Checkin CheckinDataOnDemand.getNewTransientCheckin(int index) {
        Checkin obj = new Checkin();
        setDescription(obj, index);
        setSpottingTime(obj, index);
        setStopTime(obj, index);
        return obj;
    }
    
    public void CheckinDataOnDemand.setDescription(Checkin obj, int index) {
        String description = "description_" + index;
        if (description.length() > 140) {
            description = description.substring(0, 140);
        }
        obj.setDescription(description);
    }
    
    public void CheckinDataOnDemand.setSpottingTime(Checkin obj, int index) {
        Calendar spottingTime = Calendar.getInstance();
        obj.setSpottingTime(spottingTime);
    }
    
    public void CheckinDataOnDemand.setStopTime(Checkin obj, int index) {
        StopTime stopTime = stopTimeDataOnDemand.getRandomStopTime();
        obj.setStopTime(stopTime);
    }
    
    public Checkin CheckinDataOnDemand.getSpecificCheckin(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Checkin obj = data.get(index);
        Integer id = obj.getId();
        return Checkin.findCheckin(id);
    }
    
    public Checkin CheckinDataOnDemand.getRandomCheckin() {
        init();
        Checkin obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Checkin.findCheckin(id);
    }
    
    public boolean CheckinDataOnDemand.modifyCheckin(Checkin obj) {
        return false;
    }
    
    public void CheckinDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Checkin.findCheckinEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Checkin' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Checkin>();
        for (int i = 0; i < 10; i++) {
            Checkin obj = getNewTransientCheckin(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
